mixin recentMetricsCard(day)
  - const fallbackRecentFormatted = { adSpend: '0', impressions: '0', clicks: '0', transactions: '0', sales: '0', costOfGoods: '0', profit: '0' };
  - const formatted = (day && day.display && day.display.formatted) ? day.display.formatted : fallbackRecentFormatted;
  .card.recent-day-card.shadow-sm.mb-3
    .card-header.bg-light.font-weight-bold= (day && day.dateLabel) ? day.dateLabel : '—'
    .card-body.p-3
      table.table.table-sm.mb-0
        tbody
          tr
            th Реклама
            td= formatted.adSpend || '0'
          tr
            th Показы
            td= formatted.impressions || '0'
          tr
            th Клики
            td= formatted.clicks || '0'
          tr
            th Транзакции
            td= formatted.transactions || '0'
          tr
            th Продажи
            td= formatted.sales || '0'
          tr
            th Себестоимость
            td= formatted.costOfGoods || '0'
          tr
            th Прибыль
            td= formatted.profit || '0'

include ../partials/simpleLoadingOverlay.pug
include ../partials/reportLoadingOverlay.pug

doctype html
html(lang="ru")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Месячный статический отчёт
    link(rel="stylesheet", href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css")
    style.
      .table-scroll {
        overflow-x: auto;
      }
      .month-card + .month-card {
        margin-top: 2rem;
      }
      .source-plan.d-none {
        display: none !important;
      }
      .monthly-table thead th {
        background: #f7f9fc;
        color: #2c3c54;
        border-color: #e2e8f0;
      }
      .monthly-table tbody td,
      .monthly-table tfoot td {
        border-color: #e0e6f5;
      }
      .metric-brown,
      th.metric-brown {
        color: #5a3b21;
        background-color: #f5e4d4;
        font-weight: 600;
      }
      .metric-green,
      th.metric-green {
        color: #225530;
        background-color: #dff3e6;
        font-weight: 600;
      }
      .metric-blue,
      th.metric-blue {
        color: #1d2f4d;
        background-color: #edf3ff;
        font-weight: 600;
      }
      .metric-brown span,
      .metric-green span,
      .metric-blue span {
        color: inherit !important;
      }
      .recent-day-card {
        min-height: 100%;
      }
      .recent-day-card table th {
        width: 60%;
      }
  body
    .container-fluid.py-4
      .d-flex.justify-content-between.align-items-center.mb-4
        h1.mb-0.text-primary Статический месячный отчёт
        a.btn.btn-outline-secondary(href="/") К выбору отчётов
      if successMessage
        .alert.alert-success.mb-3= successMessage
      if errorMessage
        .alert.alert-danger.mb-3= errorMessage
      if months && months.length
        - const blueHeaderStyle = 'background-color: #edf3ff; color: #1d2f4d;'
        - const blueCellStyle = 'background-color: #f3f7ff; color: #1d2f4d;'
        - const brownHeaderStyle = 'background-color: #f5e4d4; color: #5a3b21;'
        - const brownCellStyle = 'background-color: #f8ede1; color: #5a3b21;'
        - const greenHeaderStyle = 'background-color: #dff3e6; color: #225530;'
        - const greenCellStyle = 'background-color: #e8f7ee; color: #225530;'
        - let defaultMonth = months[months.length - 1]
        - const activeCandidate = typeof activeMonthKey === 'string' ? months.find(m => m.key === activeMonthKey) : null
        if activeCandidate
          - defaultMonth = activeCandidate
        form#rebuildForm.form-inline.mb-3(method="post", action="/reports/monthly/rebuild", data-report-form, data-overlay-target="heavy")
          input#rebuildYear(type="hidden", name="year", value=defaultMonth.year)
          input#rebuildMonth(type="hidden", name="month", value=defaultMonth.month)
          button.btn.btn-outline-primary(type="submit") Пересобрать выбранный месяц
        .form-group.mb-4
          label.font-weight-bold(for="monthSelect") Выберите месяц:
          select#monthSelect.form-control.form-control-sm(style="max-width: 260px;")
            each month in months
              option(value=month.key selected=(month.key === defaultMonth.key) ? true : false)= month.label
        each month, monthIndex in months
          - const anchorId = `month-${month.year}-${String(month.month).padStart(2, '0')}`
          - const isDefaultMonth = month.key === defaultMonth.key
          .card.shadow-sm.mb-3(data-month-card=month.key data-year=month.year data-month=month.month class=isDefaultMonth ? '' : 'd-none')
            .card-header.bg-white
              .d-flex.justify-content-between.align-items-center
                h2.h5.mb-0.text-capitalize= month.label
                .text-muted.small
                  | Период:&nbsp;
                  strong #{month.startDate} – #{month.endDate}
                  if month.generatedAt
                    | &nbsp;•&nbsp;Обновлено:&nbsp;
                    strong= new Date(month.generatedAt).toLocaleString('ru-RU')
                  if month.isCurrent
                    span.badge.badge-info.ml-2 Текущий месяц
            .card-body
              .mb-4
                h3.h6.text-secondary.mb-3 Общие показатели
                .table-responsive.table-scroll
                  table.table.table-sm.table-bordered.monthly-table
                    thead.thead-light
                      tr
                        th.metric-blue(style=blueHeaderStyle) Реклама (грн)
                        th.metric-blue(style=blueHeaderStyle) Цена за клик
                        th.metric-blue(style=blueHeaderStyle) Показы
                        th.metric-blue(style=blueHeaderStyle) % конв. показы/клики
                        th.metric-blue(style=blueHeaderStyle) Клики
                        th.metric-blue(style=blueHeaderStyle) % конв. клики/транзакции
                        th.metric-blue(style=blueHeaderStyle) Транзакции
                        th.metric-blue(style=blueHeaderStyle) Цена конверсии
                        th.metric-blue(style=blueHeaderStyle) Продажи (грн)
                        th.metric-blue(style=blueHeaderStyle) Себестоимость
                        th.metric-blue(style=blueHeaderStyle) Маржа
                        th.metric-brown(style=brownHeaderStyle) Прибыль (грн)
                        th.metric-brown(style=brownHeaderStyle) Средний чек
                        th.metric-brown(style=brownHeaderStyle) ROI
                        th.metric-brown(style=brownHeaderStyle) Средняя прибыль
                        th.metric-brown(style=brownHeaderStyle) % рекламы от оборота
                        th.metric-brown(style=brownHeaderStyle) % себестоимости от оборота
                        th.metric-brown(style=brownHeaderStyle) % прибыли от оборота
                    tbody
                      tr
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.adSpend
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.costPerClick
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.impressions
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.ctr
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.clicks
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.clickToTransConversion
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.transactions
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.costPerTransaction
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.sales
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.costOfGoods
                        td.metric-blue(style=blueCellStyle)= month.totals.display.formatted.margin
                        td.metric-brown(style=brownCellStyle)= month.totals.display.formatted.profit
                        td.metric-brown(style=brownCellStyle)= month.totals.display.formatted.avgCheck
                        td.metric-brown(style=brownCellStyle)= month.totals.display.formatted.roi
                        td.metric-brown(style=brownCellStyle)= month.totals.display.formatted.avgProfitPerTransaction
                        td.metric-brown(style=brownCellStyle)= month.totals.display.formatted.adSpendShare
                        td.metric-brown(style=brownCellStyle)= month.totals.display.formatted.costShare
                        td.metric-brown(style=brownCellStyle)= month.totals.display.formatted.profitShare
                .table-responsive.table-scroll.mt-3
                  table.table.table-sm.table-bordered.monthly-table
                    thead.thead-light
                      tr
                        th План продаж (грн)
                        th Закончим месяц с продажами (грн)
                        th % отклонения (план периода)
                        th План продаж накопит.
                        th Факт продаж накопит.
                        th % отклонения (накопит.)
                        th План прибыли (грн)
                        th Закончим месяц с прибылью (грн)
                        th % отклонения (план прибыли)
                        th План прибыли накопит.
                        th Факт прибыли накопит.
                        th % отклонения (накоп. прибыль)
                    tbody
                      tr
                        td= month.totals.display.formatted.planSalesMonthly
                        td= month.totals.display.formatted.projectedSales
                        td= month.totals.display.formatted.deviationProjectedSales
                        td= month.totals.display.formatted.planSalesCumulative
                        td= month.totals.display.formatted.factSalesCumulative
                        td= month.totals.display.formatted.deviationSalesCumulative
                        td= month.totals.display.formatted.planProfitMonthly
                        td= month.totals.display.formatted.projectedProfit
                        td= month.totals.display.formatted.deviationProjectedProfit
                        td= month.totals.display.formatted.planProfitCumulative
                        td= month.totals.display.formatted.factProfitCumulative
                        td= month.totals.display.formatted.deviationProfitCumulative
                if month.sources && month.sources.length
                  - const cumulativePlanSales = month.totals.display.raw ? month.totals.display.raw.planSalesCumulative || 0 : 0
                  - const cumulativePlanProfit = month.totals.display.raw ? month.totals.display.raw.planProfitCumulative || 0 : 0
                  - const cumulativeFactSales = month.totals.display.raw ? month.totals.display.raw.factSalesCumulative || 0 : 0
                  - const cumulativeFactProfit = month.totals.display.raw ? month.totals.display.raw.factProfitCumulative || 0 : 0
                  - const salesDiffRatio = cumulativePlanSales > 0 ? (cumulativeFactSales / cumulativePlanSales) - 1 : null
                  - const profitDiffRatio = cumulativePlanProfit > 0 ? (cumulativeFactProfit / cumulativePlanProfit) - 1 : null
                  - const salesDiffPercent = salesDiffRatio === null ? null : Math.round(salesDiffRatio * 100)
                  - const profitDiffPercent = profitDiffRatio === null ? null : Math.round(profitDiffRatio * 100)
                  - const overallSalesClass = salesDiffPercent === null ? '' : (salesDiffPercent >= 0 ? 'text-success font-weight-bold' : 'text-danger font-weight-bold')
                  - const overallProfitClass = profitDiffPercent === null ? '' : (profitDiffPercent >= 0 ? 'text-success font-weight-bold' : 'text-danger font-weight-bold')
                  - const salesDiffLabel = salesDiffPercent === null ? '—' : `${salesDiffPercent > 0 ? '+' : ''}${salesDiffPercent}%`
                  - const profitDiffLabel = profitDiffPercent === null ? '—' : `${profitDiffPercent > 0 ? '+' : ''}${profitDiffPercent}%`
                  .mb-2
                    h3.h6.text-secondary Плановые показатели (суммарно по источникам)
                    ul.list-unstyled.mb-2
                      li
                        strong План продаж (накопит.):&nbsp;
                        | #{month.totals.display.formatted.planSalesCumulative}
                        | &nbsp;•&nbsp;Факт:&nbsp;#{month.totals.display.formatted.factSalesCumulative}
                        | &nbsp;•&nbsp;
                        span(class=overallSalesClass)= salesDiffLabel
                      li
                        strong План прибыли (накопит.):&nbsp;
                        | #{month.totals.display.formatted.planProfitCumulative}
                        | &nbsp;•&nbsp;Факт:&nbsp;#{month.totals.display.formatted.factProfitCumulative}
                        | &nbsp;•&nbsp;
                        span(class=overallProfitClass)= profitDiffLabel
                  button.btn.btn-link.p-0.mb-2.plan-toggle(type="button", data-target=`plans-details-${anchorId}`)
                    span.toggle-icon.mr-1 ▼
                    | Детализация планов по источникам
                  .plan-details.d-none(id=`plans-details-${anchorId}`)
                    .table-responsive.table-scroll.mt-2
                      table.table.table-sm.table-bordered.monthly-table
                        thead.thead-light
                          tr
                            th Источник
                            th План продаж (грн)
                            th Закончим месяц с продажами (грн)
                            th % отклонения (план периода)
                            th План продаж накопит.
                            th Факт продаж накопит.
                            th % отклонения (накопит.)
                            th План прибыли (грн)
                            th Закончим месяц с прибылью (грн)
                            th % отклонения (план прибыли)
                            th План прибыли накопит.
                            th Факт прибыли накопит.
                            th % отклонения (накоп. прибыль)
                        tbody
                          each source in month.sources
                            - const nameViewSafe = typeof source.nameView === 'string' ? source.nameView.trim() : ''
                            - const displayName = nameViewSafe || source.name || source.ident
                            - const sourcePlanSales = source.display.raw ? source.display.raw.planSalesMonthly || 0 : 0
                            - const sourcePlanProfit = source.display.raw ? source.display.raw.planProfitMonthly || 0 : 0
                            - const sourceFactSales = source.display.raw ? source.display.raw.factSalesCumulative || 0 : 0
                            - const sourceFactProfit = source.display.raw ? source.display.raw.factProfitCumulative || 0 : 0
                            - const sourceSalesCompletion = sourcePlanSales > 0 ? (sourceFactSales / sourcePlanSales) * 100 : null
                            - const sourceProfitCompletion = sourcePlanProfit > 0 ? (sourceFactProfit / sourcePlanProfit) * 100 : null
                            tr
                              td= displayName
                              - const salesClass = sourceSalesCompletion === null ? '' : (sourceSalesCompletion >= 100 ? 'text-success font-weight-bold' : 'text-danger font-weight-bold')
                              - const profitClass = sourceProfitCompletion === null ? '' : (sourceProfitCompletion >= 100 ? 'text-success font-weight-bold' : 'text-danger font-weight-bold')
                            td= source.display.formatted.planSalesMonthly
                            td= source.display.formatted.projectedSales
                              td(class=salesClass)= source.display.formatted.deviationProjectedSales
                              td= source.display.formatted.planSalesCumulative
                              td= source.display.formatted.factSalesCumulative
                              td(class=salesClass)= source.display.formatted.deviationSalesCumulative
                            td= source.display.formatted.planProfitMonthly
                            td= source.display.formatted.projectedProfit
                              td(class=profitClass)= source.display.formatted.deviationProjectedProfit
                              td= source.display.formatted.planProfitCumulative
                              td= source.display.formatted.factProfitCumulative
                              td(class=profitClass)= source.display.formatted.deviationProfitCumulative
                        tfoot
                          tr.table-secondary.font-weight-bold
                            td Итого
                            td= month.totals.display.formatted.planSalesMonthly
                            td= month.totals.display.formatted.projectedSales
                            td(class=overallSalesClass)= month.totals.display.formatted.deviationProjectedSales
                            td= month.totals.display.formatted.planSalesCumulative
                            td= month.totals.display.formatted.factSalesCumulative
                            td(class=overallSalesClass)= month.totals.display.formatted.deviationSalesCumulative
                            td= month.totals.display.formatted.planProfitMonthly
                            td= month.totals.display.formatted.projectedProfit
                            td(class=overallProfitClass)= month.totals.display.formatted.deviationProjectedProfit
                            td= month.totals.display.formatted.planProfitCumulative
                            td= month.totals.display.formatted.factProfitCumulative
                            td(class=overallProfitClass)= month.totals.display.formatted.deviationProfitCumulative
              form(method="post", action="/reports/monthly/plans", data-report-form)
                input(type="hidden", name="year", value=month.year)
                input(type="hidden", name="month", value=month.month)
                .form-row.align-items-end
                  .col-md-3.col-sm-6.mb-3
                    label.form-label Дней в месяце
                    input.form-control(type="text", readonly, value=month.daysInMonth)
                  .col-md-3.col-sm-6.mb-3
                    label.form-label Прошло дней
                    input.form-control(type="text", readonly, value=month.elapsedDays)
                hr
                if month.sources && month.sources.length
                  .form-group
                    label.font-weight-bold(for=`source-select-${anchorId}`) Источник
                    select.form-control.source-select(id=`source-select-${anchorId}` data-default-source=(month.sources[0] && month.sources[0].ident) ? month.sources[0].ident : '')
                      each source in month.sources
                        - const nameViewSafe = typeof source.nameView === 'string' ? source.nameView.trim() : ''
                        - const displayName = nameViewSafe || source.name || source.ident
                        option(value=source.ident)= displayName
                  each source, sourceIndex in month.sources
                    - const planSalesValueRaw = (source.plan && source.plan.sales !== undefined) ? source.plan.sales : ''
                    - const planProfitValueRaw = (source.plan && source.plan.profit !== undefined) ? source.plan.profit : ''
                    - const planSalesValue = typeof planSalesValueRaw === 'number' ? Math.round(planSalesValueRaw) : planSalesValueRaw
                    - const planProfitValue = typeof planProfitValueRaw === 'number' ? Math.round(planProfitValueRaw) : planProfitValueRaw
                    - const nameViewSafe = typeof source.nameView === 'string' ? source.nameView.trim() : ''
                    - const displayNameDetail = nameViewSafe || source.name || source.ident
                    - const isSourceDefault = sourceIndex === 0
                    .source-plan.mt-4(data-source=source.ident class=isSourceDefault ? '' : 'd-none')
                      h3.h6.text-secondary= `Показатели для ${displayNameDetail}`
                      .table-responsive.table-scroll
                        table.table.table-sm.table-bordered.monthly-table
                          thead.thead-light
                            tr
                              th Реклама (грн)
                              th Цена за клик
                              th Показы
                              th % конв. показы/клики
                              th Клики
                              th % конв. клики/транзакции
                              th Транзакции
                              th Цена конверсии
                              th Продажи (грн)
                              th Себестоимость
                              th Маржа
                              th.metric-green(style=greenHeaderStyle) Прибыль (грн)
                              th.metric-green(style=greenHeaderStyle) Средний чек
                              th.metric-green(style=greenHeaderStyle) ROI
                              th.metric-green(style=greenHeaderStyle) Средняя прибыль
                              th.metric-green(style=greenHeaderStyle) % рекламы от оборота
                              th.metric-green(style=greenHeaderStyle) % себестоимости от оборота
                              th.metric-green(style=greenHeaderStyle) % прибыли от оборота
                          tbody
                            tr
                              td= source.display.formatted.adSpend
                              td= source.display.formatted.costPerClick
                              td= source.display.formatted.impressions
                              td= source.display.formatted.ctr
                              td= source.display.formatted.clicks
                              td= source.display.formatted.clickToTransConversion
                              td= source.display.formatted.transactions
                              td= source.display.formatted.costPerTransaction
                              td= source.display.formatted.sales
                              td= source.display.formatted.costOfGoods
                              td= source.display.formatted.margin
                              td.metric-green(style=greenCellStyle)= source.display.formatted.profit
                              td.metric-green(style=greenCellStyle)= source.display.formatted.avgCheck
                              td.metric-green(style=greenCellStyle)= source.display.formatted.roi
                              td.metric-green(style=greenCellStyle)= source.display.formatted.avgProfitPerTransaction
                              td.metric-green(style=greenCellStyle)= source.display.formatted.adSpendShare
                              td.metric-green(style=greenCellStyle)= source.display.formatted.costShare
                              td.metric-green(style=greenCellStyle)= source.display.formatted.profitShare
                      .table-responsive.table-scroll.mt-3
                        table.table.table-sm.table-bordered.monthly-table
                          thead.thead-light
                            tr
                              th План продаж (грн)
                              th Прогноз продаж (грн)
                              th % отклонения (план периода)
                              th План продаж накопит.
                              th Факт продаж накопит.
                              th % отклонения (накопит.)
                              th План прибыли (грн)
                              th Прогноз прибыли (грн)
                              th % отклонения (план прибыли)
                              th План прибыли накопит.
                              th Факт прибыли накопит.
                              th % отклонения (накоп. прибыль)
                          tbody
                            tr
                              td= source.display.formatted.planSalesMonthly
                              td= source.display.formatted.projectedSales
                              td(class=salesClass)= source.display.formatted.deviationProjectedSales
                              td= source.display.formatted.planSalesCumulative
                              td= source.display.formatted.factSalesCumulative
                              td(class=salesClass)= source.display.formatted.deviationSalesCumulative
                              td= source.display.formatted.planProfitMonthly
                              td= source.display.formatted.projectedProfit
                              td(class=profitClass)= source.display.formatted.deviationProjectedProfit
                              td= source.display.formatted.planProfitCumulative
                              td= source.display.formatted.factProfitCumulative
                              td(class=profitClass)= source.display.formatted.deviationProfitCumulative
                      .form-row.mt-3
                        .col-md-3.col-sm-6.mb-3
                          label.form-label План продаж (грн)
                          input.form-control(type="number", step="1", min="0", name=`sources[${source.ident}][sales]`, value=planSalesValue)
                        .col-md-3.col-sm-6.mb-3
                          label.form-label План прибыли (грн)
                          input.form-control(type="number", step="1", min="0", name=`sources[${source.ident}][profit]`, value=planProfitValue)
                else
                  .alert.alert-warning Для этого месяца нет настроенных источников.
                button.btn.btn-primary.mt-3(type="submit") Сохранить планы
              if month.recentWindow && month.recentWindow.days && month.recentWindow.days.length
                hr.my-4
                - const recentWindowLength = month.recentWindow.lengthDays || 4
                h3.h6.text-secondary.mb-3 Показатели за последние #{recentWindowLength} дня
                if month.recentWindow.rangeLabel && month.recentWindow.rangeLabel !== '—'
                  p.text-muted.small.mb-3= `Период: ${month.recentWindow.rangeLabel}`
                .row
                  each day in month.recentWindow.days
                    .col-xl-3.col-lg-4.col-md-6
                      +recentMetricsCard(day)
                if month.recentWindow.sources && month.recentWindow.sources.length
                  - const availableRecentSources = month.recentWindow.sources
                  - const defaultRecentSourceObj = availableRecentSources.find(source => source.hasFacts) || availableRecentSources[0]
                  - const defaultRecentSource = defaultRecentSourceObj ? defaultRecentSourceObj.ident : ''
                  .mt-4
                    label.font-weight-bold(for=`recent-source-select-${anchorId}`) Источник (последние #{recentWindowLength} дня)
                    select.form-control.form-control-sm.recent-window-select(id=`recent-source-select-${anchorId}` data-default-recent-source=defaultRecentSource)
                      each source in availableRecentSources
                        - const recentSourceName = (typeof source.nameView === 'string' && source.nameView.trim().length) ? source.nameView : (source.name || source.ident)
                        option(value=source.ident selected=(source.ident === defaultRecentSource) ? true : false)= recentSourceName
                  each source, recentIndex in availableRecentSources
                    - const recentSourceLabel = (typeof source.nameView === 'string' && source.nameView.trim().length) ? source.nameView : (source.name || source.ident)
                    - const isRecentDefault = defaultRecentSource ? source.ident === defaultRecentSource : recentIndex === 0
                    .recent-window-panel.mt-3(data-recent-source=source.ident class=isRecentDefault ? '' : 'd-none')
                      h4.h6.text-secondary.mb-3= `Показатели для ${recentSourceLabel}`
                      if source.days && source.days.length
                        .row
                          each day in source.days
                            .col-xl-3.col-lg-4.col-md-6
                              +recentMetricsCard(day)
                      else
                        .alert.alert-light.small.mb-0 Нет данных за выбранные дни.
                else
                  .alert.alert-light.small.mt-3 Нет данных по источникам за выбранные дни.
                if !month.recentWindow.hasData
                  .alert.alert-warning.mt-3.mb-0 Данные за выбранные дни отсутствуют.
              else
                hr.my-4
                .alert.alert-info.mb-0 Нет данных за последние дни.
      else
        .alert.alert-info Нет доступных месяцев для отображения.

    +simpleLoadingOverlay({ id: 'monthlySimpleOverlay' })
    - const overlayMeta = typeof reportOverlayMeta !== 'undefined' ? reportOverlayMeta : {}
    +reportLoadingOverlay(overlayMeta)
    script.
      document.addEventListener('DOMContentLoaded', function () {
        var monthSelect = document.getElementById('monthSelect');
        var rebuildYear = document.getElementById('rebuildYear');
        var rebuildMonth = document.getElementById('rebuildMonth');
        var monthCards = document.querySelectorAll('[data-month-card]');

        function showMonth(key) {
          monthCards.forEach(function (card) {
            var isActive = card.getAttribute('data-month-card') === key;
            if (isActive) {
              card.classList.remove('d-none');
              rebuildYear.value = card.getAttribute('data-year');
              rebuildMonth.value = card.getAttribute('data-month');
            } else {
              card.classList.add('d-none');
            }
          });
        }

        if (monthSelect) {
          showMonth(monthSelect.value);
          monthSelect.addEventListener('change', function () {
            showMonth(this.value);
          });
        }

        document.querySelectorAll('.source-select').forEach(function (select) {
          var card = select.closest('[data-month-card]');
          var defaultSource = select.getAttribute('data-default-source');

          function updateSources(value) {
            var panels = card.querySelectorAll('.source-plan');
            panels.forEach(function (panel) {
              if (panel.getAttribute('data-source') === value) {
                panel.classList.remove('d-none');
              } else {
                panel.classList.add('d-none');
              }
            });
          }

          if (defaultSource) {
            updateSources(defaultSource);
            select.value = defaultSource;
          } else if (select.options.length) {
            updateSources(select.options[0].value);
          }

          select.addEventListener('change', function () {
            updateSources(this.value);
          });
        });

        document.querySelectorAll('.recent-window-select').forEach(function (select) {
          var card = select.closest('[data-month-card]');
          var defaultRecent = select.getAttribute('data-default-recent-source');
          if (defaultRecent) {
            var hasOption = Array.from(select.options).some(function (option) {
              return option.value === defaultRecent;
            });
            if (hasOption) {
              select.value = defaultRecent;
            }
          }
          function updateRecentPanels(value) {
            var panels = card.querySelectorAll('.recent-window-panel');
            var matched = false;
            panels.forEach(function (panel) {
              if (panel.getAttribute('data-recent-source') === value) {
                panel.classList.remove('d-none');
                matched = true;
              } else {
                panel.classList.add('d-none');
              }
            });
            if (!matched && panels.length) {
              panels[0].classList.remove('d-none');
              if (select.options.length) {
                select.value = panels[0].getAttribute('data-recent-source');
              }
            }
          }
          if (select.value) {
            updateRecentPanels(select.value);
          } else if (select.options.length) {
            select.value = select.options[0].value;
            updateRecentPanels(select.value);
          }
          select.addEventListener('change', function () {
            updateRecentPanels(this.value);
          });
        });

        document.querySelectorAll('.plan-toggle').forEach(function (button) {
          var targetId = button.getAttribute('data-target');
          var icon = button.querySelector('.toggle-icon');
          var panel = document.getElementById(targetId);
          if (!panel) {
            return;
          }
          button.addEventListener('click', function () {
            var isHidden = panel.classList.contains('d-none');
            panel.classList.toggle('d-none');
            if (icon) {
              icon.textContent = isHidden ? '▲' : '▼';
            }
          });
        });
      });
